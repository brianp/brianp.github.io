<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>conferences on { always: &#39;coding&#39; }</title>
    <link>https://alwayscoding.ca/categories/conferences/</link>
    <description>Recent content in conferences on { always: &#39;coding&#39; }</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Sep 2016 10:00:00 +0000</lastBuildDate><atom:link href="https://alwayscoding.ca/categories/conferences/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RustConf 2016 Talks</title>
      <link>https://alwayscoding.ca/momentos/2016/09/10/rustconf-2016-talks/</link>
      <pubDate>Sat, 10 Sep 2016 10:00:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2016/09/10/rustconf-2016-talks/</guid>
      <description>Opening Keynote by Aaron Turon and Niko Matsakis
 175 new features since 1.0  New features underway
 Specialization impl Trait The ? operator Macro 1.1 offers custom derive  Compiler internals redesigned
 Mir in orbit Dynamic drop flags Incremental comp Error messages  Challenges in the Rust survey
 1 in 4 Learning curve (First 3 weeks is rough) 1 in 7 More libraris 1 in 9 &amp;ldquo;Maturity&amp;rdquo; 1 in 19 IDEs 1 in 20 Compiler Perf  Speed and reliability are core values of rust, but for 2017, productivity should as well.</description>
    </item>
    
    <item>
      <title>Traits and Threads Workshop</title>
      <link>https://alwayscoding.ca/momentos/2016/09/09/traits-and-threads-workshop/</link>
      <pubDate>Fri, 09 Sep 2016 10:00:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2016/09/09/traits-and-threads-workshop/</guid>
      <description>These are raw notes taken at RustConf during the “Traits and Threads” workshop put on by Aaron Turon
All Exercises
 Methods are function that accept self &amp;amp;self.items == &amp;amp;(self.items) where the borrow (&amp;amp;) is for the item, not for self. Structs have no default value, requires creating all values. mut as mute not like a mixed breed dog   Abstraction: The Plan
 Generics Traits As Interfaces For Code Resuse For Perator Overloading Trait Objects   Traits are rusts interfaces.</description>
    </item>
    
    <item>
      <title>Cascadia Ruby 2014 - Day Two</title>
      <link>https://alwayscoding.ca/momentos/2014/08/12/cascadia-ruby-2014-day-two/</link>
      <pubDate>Tue, 12 Aug 2014 09:30:59 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2014/08/12/cascadia-ruby-2014-day-two/</guid>
      <description>Note: This post is an un-contexualized, un-edited, &amp;amp; un-proofed bunch of notes taken during Cascadia Ruby 2014.
T.J. Schuck
80,000 Plaintext Passwords: An Open Source Love Story in Three Acts
 John the Ripper password cracker. hashcat. Expensive key schedule blowfish. eksblowfish. BCrypt  BCrypt dollar signs are delimieters, hash on far right. Salt on left. 2(abxy) means bcrypt 10 = cost $ 2a $ 10 $ salt $ hash 12 to 13 range for bcrypt cost.</description>
    </item>
    
    <item>
      <title>Cascadia Ruby 2014 - Day One</title>
      <link>https://alwayscoding.ca/momentos/2014/08/11/cascadia-ruby-2014-day-one/</link>
      <pubDate>Mon, 11 Aug 2014 09:26:37 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2014/08/11/cascadia-ruby-2014-day-one/</guid>
      <description>Note: This post is an un-contexualized, un-edited, &amp;amp; un-proofed bunch of notes taken during Cascadia Ruby 2014.
John Hyland
Be Awesome By Being Boring
 “standard is better then better” Nobody know how it works yet. Docker apis changed. No standard uusage pattern. Security wild card. Protocol Buffer version of your performance critical endpoints. SRV Records.   Davy Stevenson
The Science of Success
 Jarvis March (Gift wrapping Algorithm.) Monotone Algorithm.</description>
    </item>
    
    <item>
      <title>Cascadia Ruby 2013 - Day Two</title>
      <link>https://alwayscoding.ca/momentos/2013/10/22/cascadia-ruby-2013-day-two/</link>
      <pubDate>Tue, 22 Oct 2013 15:22:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/10/22/cascadia-ruby-2013-day-two/</guid>
      <description>Note: This post is an un-contexualized, un-edited, &amp;amp; un-proofed bunch of notes taken during Cascadia Ruby 2013.
Andy Delcambre Cascadia Ruby 2013: Ruby Systems Programming
The kernal  Runs in kernal mode. Not your code. Can do anything and everything.  Your Code  Runs in user mode. Math. Access memory.  System calls  Ask the kernal nicely to do things. Api to kenal mode. If it is not in the syscall_table you can not call it.</description>
    </item>
    
    <item>
      <title>Cascadia Ruby 2013 - Day One</title>
      <link>https://alwayscoding.ca/momentos/2013/10/21/cascadia-ruby-2013-day-one/</link>
      <pubDate>Mon, 21 Oct 2013 15:45:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/10/21/cascadia-ruby-2013-day-one/</guid>
      <description>Note: This post is an un-contexualized, un-edited, &amp;amp; un-proofed bunch of notes taken during Cascadia Ruby 2013.
Josh Adams and Robby Clements Ruby Robotics
Where to start Sphero - $130.00  Bluetooth enabled ball. Drives itself around. Best dog toy ever. Waterproof.  Parrot AR Droid - $150.00  Acts as its own wifi AP. Connect over wifi. UDP packers. Stream video from 2 cameras.  Rolling your own  Beaglebone Black.</description>
    </item>
    
  </channel>
</rss>
