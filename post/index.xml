<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on { always: &#39;coding&#39; }</title>
    <link>https://alwayscoding.ca/post/</link>
    <description>Recent content in Posts on { always: &#39;coding&#39; }</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Jan 2022 18:18:00 +0000</lastBuildDate><atom:link href="https://alwayscoding.ca/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gpg failed to sign the data</title>
      <link>https://alwayscoding.ca/momentos/2022/01/05/gpg-failed-to-sign-the-data/</link>
      <pubDate>Wed, 05 Jan 2022 18:18:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2022/01/05/gpg-failed-to-sign-the-data/</guid>
      <description>I get this terminal error about every three to six months:
error: gpg failed to sign the data fatal: failed to write commit object When I see it I think &amp;ldquo;I really should have written down the problem last time&amp;rdquo;. So here we are, ready and willing to document.
 The issue for me is that I set short expiration times for my gpg keys.
 To verify my key is expired I run: $ gpg -K --keyid-format SHORT and get results like below:</description>
    </item>
    
    <item>
      <title>Raw HTML in Hugo Markdown</title>
      <link>https://alwayscoding.ca/momentos/2021/12/19/raw-html-in-hugo-markdown/</link>
      <pubDate>Sun, 19 Dec 2021 10:24:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2021/12/19/raw-html-in-hugo-markdown/</guid>
      <description>I finally decided to run some updates on the ol&#39; blog and noticed some posts had missing content after the update. At a glance all the missing content seemingly used raw HTML tags.
A quick look to the rendered source found comment tags in all the previous HTML locations:
&amp;lt;!-- raw HTML omitted --&amp;gt; It turns out somewhere along the line (Hugo v0.6.0) the markdown rendering engine was changed to Goldmark.</description>
    </item>
    
    <item>
      <title>Cycling New Years Resolution Complete!</title>
      <link>https://alwayscoding.ca/momentos/2020/11/24/cycling-new-years-resolution-complete/</link>
      <pubDate>Tue, 24 Nov 2020 23:06:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2020/11/24/cycling-new-years-resolution-complete/</guid>
      <description>I&#39;ve missed my cycling goals two years in a row. Should I tone back my expectations or is that under-aiming?  @brian_pearce https://twitter.com/brian_pearce/status/561380088168468481   Only 5 years later. I decided to have the same goal &amp;amp; New Years resolution for 2020. Complete 10,000km of cycling and tonight I completed it a month early!
Highlights Despite the Pandemic kicking off I made good use of our 12 week real lockdown in Barcelona.</description>
    </item>
    
    <item>
      <title>RustConf 2016 Talks</title>
      <link>https://alwayscoding.ca/momentos/2016/09/10/rustconf-2016-talks/</link>
      <pubDate>Sat, 10 Sep 2016 10:00:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2016/09/10/rustconf-2016-talks/</guid>
      <description>Opening Keynote by Aaron Turon and Niko Matsakis
photo by: [@eigenrick](https://twitter.com/eigenrick)  175 new features since 1.0  New features underway
 Specialization impl Trait The ? operator Macro 1.1 offers custom derive  Compiler internals redesigned
 Mir in orbit Dynamic drop flags Incremental comp Error messages  Challenges in the Rust survey
 1 in 4 Learning curve (First 3 weeks is rough) 1 in 7 More libraries 1 in 9 &amp;ldquo;Maturity&amp;rdquo; 1 in 19 IDEs 1 in 20 Compiler Perf  Speed and reliability are core values of rust, but for 2017, productivity should as well.</description>
    </item>
    
    <item>
      <title>Traits and Threads Workshop</title>
      <link>https://alwayscoding.ca/momentos/2016/09/09/traits-and-threads-workshop/</link>
      <pubDate>Fri, 09 Sep 2016 10:00:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2016/09/09/traits-and-threads-workshop/</guid>
      <description>These are raw notes taken at RustConf during the “Traits and Threads” workshop put on by Aaron Turon
All Exercises
 Methods are function that accept self &amp;amp;self.items == &amp;amp;(self.items) where the borrow (&amp;amp;) is for the item, not for self. Structs have no default value, requires creating all values. mut as mute not like a mixed breed dog   Abstraction: The Plan
 Generics Traits As Interfaces For Code Resuse For Perator Overloading Trait Objects   Traits are rusts interfaces.</description>
    </item>
    
    <item>
      <title>Cross compilation to OSX with Rust</title>
      <link>https://alwayscoding.ca/momentos/2016/05/08/cross-compilation-to-osx-with-rust/</link>
      <pubDate>Sun, 08 May 2016 10:06:42 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2016/05/08/cross-compilation-to-osx-with-rust/</guid>
      <description>It started with Muxed. I was excited to get a working first build, but despite my development machine being a MacBook Air, I develop most in VM&amp;rsquo;s using vagrant. My native builds were all linux based. It would be easy enough to move the code to an OSX machine and compile there but I do not like build tools on my native machine. And that would simply be too easy.</description>
    </item>
    
    <item>
      <title>Tips for working with Delayed Job</title>
      <link>https://alwayscoding.ca/momentos/2015/10/01/tips-for-working-with-delayed-job/</link>
      <pubDate>Thu, 01 Oct 2015 09:12:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2015/10/01/tips-for-working-with-delayed-job/</guid>
      <description>DelayedJob has always been a great “hit the ground running” background task runner for ruby. It is simple to setup, easy to use and can more than carry its own weight in tasks.
Don&amp;rsquo;t know what a backround runner does or why you would use one?
I will not delve into why you need one but you can check out a summary here: Background Jobs in Ruby on Rails.</description>
    </item>
    
    <item>
      <title>Cascadia Ruby 2014 - Day Two</title>
      <link>https://alwayscoding.ca/momentos/2014/08/12/cascadia-ruby-2014-day-two/</link>
      <pubDate>Tue, 12 Aug 2014 09:30:59 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2014/08/12/cascadia-ruby-2014-day-two/</guid>
      <description>Note: This post is an un-contexualized, un-edited, &amp;amp; un-proofed bunch of notes taken during Cascadia Ruby 2014.
T.J. Schuck
80,000 Plaintext Passwords: An Open Source Love Story in Three Acts
 John the Ripper password cracker. hashcat. Expensive key schedule blowfish. eksblowfish. BCrypt  BCrypt dollar signs are delimieters, hash on far right. Salt on left. 2(abxy) means bcrypt 10 = cost $ 2a $ 10 $ salt $ hash 12 to 13 range for bcrypt cost.</description>
    </item>
    
    <item>
      <title>Cascadia Ruby 2014 - Day One</title>
      <link>https://alwayscoding.ca/momentos/2014/08/11/cascadia-ruby-2014-day-one/</link>
      <pubDate>Mon, 11 Aug 2014 09:26:37 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2014/08/11/cascadia-ruby-2014-day-one/</guid>
      <description>Note: This post is an un-contexualized, un-edited, &amp;amp; un-proofed bunch of notes taken during Cascadia Ruby 2014.
John Hyland
Be Awesome By Being Boring
 “standard is better then better” Nobody know how it works yet. Docker apis changed. No standard uusage pattern. Security wild card. Protocol Buffer version of your performance critical endpoints. SRV Records.   Davy Stevenson
The Science of Success
 Jarvis March (Gift wrapping Algorithm.) Monotone Algorithm.</description>
    </item>
    
    <item>
      <title>Handling code duplication with Sass @imports in the asset pipeline</title>
      <link>https://alwayscoding.ca/momentos/2014/02/25/handling-code-duplication-with-sass-at-imports-in-the-asset-pipeline/</link>
      <pubDate>Tue, 25 Feb 2014 15:08:38 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2014/02/25/handling-code-duplication-with-sass-at-imports-in-the-asset-pipeline/</guid>
      <description>I have used the asset pipeline heavily since its release in Rails 3.1.0 over two years ago. Only recently did I run in to a handful of gotchas when it came to dealing with stylesheet compilations using Sass.      I guest wrote a post about my experience using SASS in the asset pipeline at Unbounce.
Head on over to the Inside Unbounce blog to check out the full post.</description>
    </item>
    
    <item>
      <title>Cascadia Ruby 2013 - Day Two</title>
      <link>https://alwayscoding.ca/momentos/2013/10/22/cascadia-ruby-2013-day-two/</link>
      <pubDate>Tue, 22 Oct 2013 15:22:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/10/22/cascadia-ruby-2013-day-two/</guid>
      <description>Note: This post is an un-contexualized, un-edited, &amp;amp; un-proofed bunch of notes taken during Cascadia Ruby 2013.
Andy Delcambre Cascadia Ruby 2013: Ruby Systems Programming
The kernal  Runs in kernal mode. Not your code. Can do anything and everything.  Your Code  Runs in user mode. Math. Access memory.  System calls  Ask the kernal nicely to do things. Api to kenal mode. If it is not in the syscall_table you can not call it.</description>
    </item>
    
    <item>
      <title>Cascadia Ruby 2013 - Day One</title>
      <link>https://alwayscoding.ca/momentos/2013/10/21/cascadia-ruby-2013-day-one/</link>
      <pubDate>Mon, 21 Oct 2013 15:45:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/10/21/cascadia-ruby-2013-day-one/</guid>
      <description>Note: This post is an un-contexualized, un-edited, &amp;amp; un-proofed bunch of notes taken during Cascadia Ruby 2013.
Josh Adams and Robby Clements Ruby Robotics
Where to start Sphero - $130.00  Bluetooth enabled ball. Drives itself around. Best dog toy ever. Waterproof.  Parrot AR Droid - $150.00  Acts as its own wifi AP. Connect over wifi. UDP packers. Stream video from 2 cameras.  Rolling your own  Beaglebone Black.</description>
    </item>
    
    <item>
      <title>Angular and Liquid expressions in Jekyll</title>
      <link>https://alwayscoding.ca/momentos/2013/10/09/angular-and-liquid-expressions-in-jekyll/</link>
      <pubDate>Wed, 09 Oct 2013 19:54:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/10/09/angular-and-liquid-expressions-in-jekyll/</guid>
      <description>I started writing an Angular application to intereact with an API I have produced recently. The Angular app is compiled as a static site with Jekyll. I immediately ran into an issue with Angular. None of my expressions were showing up. I realized it was because Liquid which is included with Jekyll uses the same expression tags as Angular: {{ myVariable }}. This meant the Angular expressions were not making it as raw text into the final template as they were being caught by Liquid.</description>
    </item>
    
    <item>
      <title>Killing all Ruby Processes</title>
      <link>https://alwayscoding.ca/momentos/2013/09/24/killing-all-ruby-processes/</link>
      <pubDate>Tue, 24 Sep 2013 11:30:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/09/24/killing-all-ruby-processes/</guid>
      <description>I was running some commands that I later found out had left me with many orphaned ruby processes. Too many to kill one by one. I needed to just get rid of them all and quickly so killing all ruby processes was the best way to go.
Here is a short list of convenient and inconvenient ways to do that:
for each in `ps -eo pid,command | grep ruby | grep -v grep | awk &amp;#39;{print $1}&amp;#39; `; do kill -9 $each;done killall −9 ruby pkill -9 ruby pidof ruby | xargs kill -9 ps aux | grep sidekiq | awk &amp;#39;{print $2}&amp;#39; | xargs kill The easiest commands and best suggestions were brought to my attention by Alan Bailward and Gavin Mogan.</description>
    </item>
    
    <item>
      <title>MacBook Air (Mid 2013) Wifi Issues</title>
      <link>https://alwayscoding.ca/momentos/2013/09/17/macbook-air-mid-2013-wifi-issues/</link>
      <pubDate>Tue, 17 Sep 2013 20:20:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/09/17/macbook-air-mid-2013-wifi-issues/</guid>
      <description>As soon as the MacBook Air (Mid 2013) started shipping; reports began flooding in about intermittant wifi connectivity problems.[1] The day after it was released I ordered it. I can&amp;rsquo;t say I experinced the same issues everyone else was claiming to run into. Apple denied the issue at first (as they always do) but later released a software update for the issue.[2]
Not soon after the software update I began experiencing the wifi connectivity issues.</description>
    </item>
    
    <item>
      <title>Meaning in my work</title>
      <link>https://alwayscoding.ca/momentos/2013/09/10/meaning-in-my-work/</link>
      <pubDate>Tue, 10 Sep 2013 12:00:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/09/10/meaning-in-my-work/</guid>
      <description>“If you enjoy what you do you will never work a day in your life.”      Just recently I was elated when a client contacted us. We have been working on an ongoing project with them for over two years. They contacted us just to let us know they had used the project as a demo and witness. They used the project to help acquire funding for twenty-five full scholarships for youth from all over the world to attend any educational insitutue of their choosing.</description>
    </item>
    
    <item>
      <title>HTML Anchors with ids</title>
      <link>https://alwayscoding.ca/momentos/2013/09/03/html-anchors-with-ids/</link>
      <pubDate>Tue, 03 Sep 2013 10:42:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/09/03/html-anchors-with-ids/</guid>
      <description>Despite being in the HTML 4.01 spec since 1999 I picked up another small frontend tip recently.
When adding anchors on a page for the purpose of in-page links my typical method for years has been to add a link with the anchor name in the href and an anchor tag with a name attribute.
&amp;lt;a href=&amp;#34;#productList&amp;#34;&amp;gt;View more products&amp;lt;/a&amp;gt; Some page content… &amp;lt;a name=&amp;#34;productList&amp;#34;&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;ul class=&amp;#34;productList&amp;#34;&amp;gt;…&amp;lt;/a&amp;gt; Just the other day @ry5n informed me that a link that corresponds to an elements id will work just the same and there&amp;rsquo;s no need to add an additional anchor with a name.</description>
    </item>
    
    <item>
      <title>Handling Dates &amp; Timezones in Ruby &amp; Rails</title>
      <link>https://alwayscoding.ca/momentos/2013/08/15/handling-dates-and-timezones-in-ruby-and-rails/</link>
      <pubDate>Thu, 15 Aug 2013 11:21:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/08/15/handling-dates-and-timezones-in-ruby-and-rails/</guid>
      <description>I&amp;rsquo;ve spent almost the last two weeks dealing with Date and Time Zone related issues within one of the applications I contract on. This is a just a list of notable behaviours I expereinced whilst working with Ruby, Rails, Dates &amp;amp; TimeZones.
Note: DST is in effect at the time of writing.
Inconsistent Handling of DST In the code below we instantiate an ActiveSupport::TimeZone object. I would love to think that this instance would know everything about that Time Zone.</description>
    </item>
    
    <item>
      <title>Using Rails I18n translations to solve dynamic content issues</title>
      <link>https://alwayscoding.ca/momentos/2013/06/13/using-rails-i18n-translations-to-solve-dynamic-content-issues/</link>
      <pubDate>Thu, 13 Jun 2013 17:33:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/06/13/using-rails-i18n-translations-to-solve-dynamic-content-issues/</guid>
      <description>Last week during my main work contract I had been tasked with doing some would-be trivial content updates to a section of a client application. Content updates would normally involve hopping into a view changing some images or text and re-deploying. This particular section though is a little more complex then that and way more complex then it should be.
The Setup This particular section of the application has rotating content.</description>
    </item>
    
    <item>
      <title>DataMapper SQL Queries in Rails Console</title>
      <link>https://alwayscoding.ca/momentos/2013/06/09/datamapper-sql-queries-in-rails-console/</link>
      <pubDate>Sun, 09 Jun 2013 13:37:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/06/09/datamapper-sql-queries-in-rails-console/</guid>
      <description>A quick note on logging SQL queries in DataMapper 1.2 so you can see exactly what&amp;rsquo;s going on behind the scenes. Seeing the query can be beneficial in debugging when getting unexpected results or trying to increase query performance.
DataMapper::Logger.new($stdout, :debug)
Enter that at anytime while running in rails c and you should start seeing the output immediatley.
Note If you don&amp;rsquo;t see the output potentially it&amp;rsquo;s because of DM&amp;rsquo;s identiity map.</description>
    </item>
    
    <item>
      <title>Map with Index</title>
      <link>https://alwayscoding.ca/momentos/2013/06/07/map-with-index/</link>
      <pubDate>Fri, 07 Jun 2013 15:32:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/06/07/map-with-index/</guid>
      <description>Notes: Working with ruby 1.8.7 but 1.9 solution presented at bottom.
While working on my main contract today I needed to create a new array based off mutated values of an existing array. Simple enough I&amp;rsquo;ll just use Enumerable::map right? Almost immediatley I realized I needed to make a reference to an array via the loops index. I first checked to see if a map_with_index existed similar to Enumerable::each_with_index.
It doesn&amp;rsquo;t.</description>
    </item>
    
    <item>
      <title>More fun with the Ruby Symbol</title>
      <link>https://alwayscoding.ca/momentos/2013/03/13/more-fun-with-the-ruby-symbol/</link>
      <pubDate>Wed, 13 Mar 2013 01:53:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/03/13/more-fun-with-the-ruby-symbol/</guid>
      <description>So while in the #RubyOnRails IRC channel late at night (never a good idea) some silly conversation occured:
(someone gists some code)
sevenseacat: empty array seems the silly thing to have
Tarential: sometimes I like to add empty arrays, you know, just in case I need them later
Tarential: so they&amp;rsquo;re close at hand
tagrudev: little kittens die when you define an unused var
brianpWins: but if you do want to leave empty arrays around.</description>
    </item>
    
    <item>
      <title>Installing Ruby 2.0.0 on MacOSX - Build Failed</title>
      <link>https://alwayscoding.ca/momentos/2013/03/12/installing-ruby-2-dot-0-0-on-macosx-build-failed/</link>
      <pubDate>Tue, 12 Mar 2013 00:42:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/03/12/installing-ruby-2-dot-0-0-on-macosx-build-failed/</guid>
      <description>Excited to start running Garnish against Ruby 2.0.0 I attempted installation tonight to get build failed:
downloading ruby-2.0.0-p0.tar.gz... -&amp;gt; http://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p0.tar.gz Installing ruby-2.0.0-p0... BUILD FAILED Inspect or clean up the working tree at /var/folders/td/0z79ghbs125193ngl8y0j8180000gn/T/ruby-build.20130312001656.54615 Results logged to /var/folders/td/0z79ghbs125193ngl8y0j8180000gn/T/ruby-build.20130312001656.54615.log Last 10 log lines: installing default gems: /Users/brianp/.rbenv/versions/2.0.0-p0/lib/ruby/gems/2.0.0 (build_info, cache, doc, gems, specifications) bigdecimal 1.2.0 io-console 0.4.2 json 1.7.7 minitest 4.3.2 psych 2.0.0 rake 0.9.6 rdoc 4.0.0 test-unit 2.0.0.0 The Ruby openssl extension was not compiled.</description>
    </item>
    
    <item>
      <title>n&#43;1 Problems and Identity Maps</title>
      <link>https://alwayscoding.ca/momentos/2013/03/06/n-plus-1-problems-and-identity-maps/</link>
      <pubDate>Wed, 06 Mar 2013 02:02:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/03/06/n-plus-1-problems-and-identity-maps/</guid>
      <description>Forward: This post is mainly copypasta from an answer I wrote on StackOverflow. It also takes into account the version of Mongoid being used predates the includes method. The includes method being the suggested best practice for the problem now. includes will be mentioned at the bottom of the post.
Take me to the current best practice.
How to deal with n+1 issues utilizing identity maps:
What is the n+1 issue?</description>
    </item>
    
    <item>
      <title>Why I Drive 100km to Abbotsford from Vancouver for a Meetup</title>
      <link>https://alwayscoding.ca/momentos/2013/02/06/why-i-drive-100km-to-abbotsford-from-vancouver-for-a-meetup/</link>
      <pubDate>Wed, 06 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/02/06/why-i-drive-100km-to-abbotsford-from-vancouver-for-a-meetup/</guid>
      <description>In 2009 I attended Wordcamp Vancouver and actually met a handful of people I still talk to, tweet to and hang out with on a semi-regular basis. At the Wordcamp after party I was talking with @curtismchale and he mentioned although he didn&amp;rsquo;t do much ruby development he got together with the Fraser Valley Ruby Brigade on Wednesday nights in Abbotsford. He also mentioned they hang out on irc frequently and I should pop into the channel and say Hi.</description>
    </item>
    
    <item>
      <title>Expiring Cache Fragments In The Rails Console</title>
      <link>https://alwayscoding.ca/momentos/2013/02/05/expiring-cache-fragments-in-the-rails-console/</link>
      <pubDate>Tue, 05 Feb 2013 00:14:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/02/05/expiring-cache-fragments-in-the-rails-console/</guid>
      <description>One of the much larger Rails applications I work on makes heavy use of caching for obvious reasons. In some locations the cache isn&amp;rsquo;t auto-expiring at the moment. After doing a deployment I needed to expire these sections manually via the console for my first time. I grabbed the name of the fragment from the view where it was being cached.
- cache(&amp;#39;all_category_judges&amp;#39;) do ... I only knew one way to access the cache in the console and attempted clearing the cache fragment from there.</description>
    </item>
    
    <item>
      <title>Nginx 413 Request Entity Too Large</title>
      <link>https://alwayscoding.ca/momentos/2013/02/02/nginx-413-request-entity-too-large/</link>
      <pubDate>Sat, 02 Feb 2013 10:24:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/02/02/nginx-413-request-entity-too-large/</guid>
      <description>Using: nginx version: nginx/1.2.4
I manage a few Linode instances as client servers but I would far from consider myself a sysadmin. I received an email from a client regarding some uploading issues. After some testing I concluded any combination of files over 1mb would raise Nginx 413 Request Entity Too Large
I upped the file limit within the virtualhost file by changing the client_max_body_size
upstream app { server unix:/tmp/app.sock fail_timeout=0; } server { listen 80; location / { proxy_pass http://app; proxy_redirect off; client_max_body_size 6m; } } This still did not work.</description>
    </item>
    
    <item>
      <title>Calling a Specific Gem Version In The Console</title>
      <link>https://alwayscoding.ca/momentos/2013/02/01/calling-a-specific-gem-version-in-the-console/</link>
      <pubDate>Fri, 01 Feb 2013 16:00:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/02/01/calling-a-specific-gem-version-in-the-console/</guid>
      <description>Today I was trying to generate a Rails 3.1.0 project (for testing purposes). I simply called rails new rollback which generated a rails 3.2.11 project and proceeded to change the gemfile version to 3.1.0. This resulted in numerous application errors. The simple solution was to generate the project with the Rails version 3.1.0. To do this call the gem with the version number as such:
$ rails _3.1.0_ new rollback You also must already have this version of the gem installed on your system for it to work.</description>
    </item>
    
    <item>
      <title>HTML Ordered List Offset</title>
      <link>https://alwayscoding.ca/momentos/2013/01/31/html-ordered-list-offset/</link>
      <pubDate>Thu, 31 Jan 2013 12:38:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/01/31/html-ordered-list-offset/</guid>
      <description>This week at the office I&amp;rsquo;ve been on a coding hiatus and just doing a lot of copy placement and markup. The client requested having a numbered list of categories separated by type headers.
I added markup as such:
 %ul %li %h2 Video %ol %li Animation %li Documentary %li Music Video %li Narrative %li Poetry/Experimental %li Collaboration %li UNICEF Challenge %li %h2 Print %ol %li Photo Collection/Digital Story/Photo Essay %li Poster/Collage/Campaign Output:</description>
    </item>
    
    <item>
      <title>There was a problem with the editor vi</title>
      <link>https://alwayscoding.ca/momentos/2012/06/21/there-was-a-problem-with-the-editor-vi/</link>
      <pubDate>Thu, 21 Jun 2012 15:45:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2012/06/21/there-was-a-problem-with-the-editor-vi/</guid>
      <description>I don&amp;rsquo;t recall the circumstances that lead to the issue but anytime I tried to open vim for git I received:
&amp;ldquo;There was a problem with the editor vi&amp;rdquo;
The solution:
git config --global core.editor /usr/local/bin/vim </description>
    </item>
    
    <item>
      <title>Hash Defaults in Ruby</title>
      <link>https://alwayscoding.ca/momentos/2012/06/15/hash-defaults-in-ruby/</link>
      <pubDate>Fri, 15 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2012/06/15/hash-defaults-in-ruby/</guid>
      <description>I was writing a rake task to handle importing data from an older community system and needed to set a default value for anything that the old system didn&amp;rsquo;t have. I was using hashs and thought to myself &amp;ldquo;It would be sweet if hashs had defaults.&amp;rdquo; After a quick doc check I found out that hashs do infact support defaults.
I encourage you to check out the Ruby Docs http://www.ruby-doc.org/core-1.9.3/Hash.html#method-i-default</description>
    </item>
    
    <item>
      <title>Ruby Hash Syntax: Hashrocket vs JSON-Style</title>
      <link>https://alwayscoding.ca/momentos/2012/06/15/ruby-hash-syntax-hashrocket-vs-json-style/</link>
      <pubDate>Fri, 15 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2012/06/15/ruby-hash-syntax-hashrocket-vs-json-style/</guid>
      <description>At a first glance the 1.9 ruby hash syntax looks like a simple change. No longer using the infamous &amp;ldquo;Hashrocket&amp;rdquo; and moving to a familiar JavaScript Object Notation.
{:cat =&amp;gt; &amp;#39;meow&amp;#39;} # 1.8 {cat: &amp;#39;meow&amp;#39;} # 1.9 On an average day I write equally as much JavaScript as I do Ruby so the new 1.9 syntax is an easy swtich for me.
Do these updates to the syntax mean that we&amp;rsquo;ll be seeing the demise of the 1.</description>
    </item>
    
    <item>
      <title>Mongoid and has_secure_password</title>
      <link>https://alwayscoding.ca/momentos/2012/06/05/mongoid-and-has-secure-password/</link>
      <pubDate>Tue, 05 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2012/06/05/mongoid-and-has-secure-password/</guid>
      <description>In the apps I&amp;rsquo;ve been working on recently I decided to utilize rails built in authentication &amp;lsquo;has_secure_password&amp;rsquo; which began shipping with Rails 3.1. Has_secure_password is simple to use and doesn&amp;rsquo;t bring in any extra bulk. With some of these projects I also decided to use MongoDB &amp;amp; Mongoid. When trying to use the has_secure_password method I got:
undefined local variable or method `has_secure_password&amp;#39; for User:Class (NameError) Solution: You must include include ActiveModel::SecurePassword.</description>
    </item>
    
    <item>
      <title>Transactions and new_record?</title>
      <link>https://alwayscoding.ca/momentos/2012/06/05/transactions-and-new-record/</link>
      <pubDate>Tue, 05 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2012/06/05/transactions-and-new-record/</guid>
      <description>While working with the ActiveRecord method &amp;lsquo;new_record?&amp;rsquo; and Transactions I ran into an odd issue after I had run a few objects through a Transaction. Although the transaction had rolled back and thus not saving the record, running &amp;lsquo;object_instance.new_record?&amp;rsquo; resulted in a return of false as if the record had been saved to the database.
I also found the same issue recorded here: http://squarewheel.wordpress.com/2008/06/11/new_record/
Here is example code where the error will happen.</description>
    </item>
    
    <item>
      <title>Flash[:notice] vs Flash.now[:notice]</title>
      <link>https://alwayscoding.ca/momentos/2011/09/11/flash-notice-vs-flash-dot-now-notice/</link>
      <pubDate>Sun, 11 Sep 2011 00:29:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2011/09/11/flash-notice-vs-flash-dot-now-notice/</guid>
      <description>While working with my new employer (in 2011) I noticed a minor but recurring issue in our application. We had been storing flash[:notice] messages in most of our actions but were not using that flash message anywhere. This was resulting in the flash message showing up at in-appropriate times. What I was unaware of was a slightly different call which is flash.now[:notice]. This results in the flash only having a lifespan of the through the next request.</description>
    </item>
    
    <item>
      <title>Saving Unique Twitter ID&#39;s &amp;amp; MySQL Integers</title>
      <link>https://alwayscoding.ca/momentos/2011/02/12/saving-unique-twitter-ids-and-mysql-integers/</link>
      <pubDate>Sat, 12 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2011/02/12/saving-unique-twitter-ids-and-mysql-integers/</guid>
      <description>TLDR; Don&amp;rsquo;t store Tweet ID&amp;rsquo;s as INT. Use BIGINT.
While writing a Twitter application in Rails I was having an issue saving tweets to the database.
A quick brief on the application: The app would download tweets from the mention timeline of a particular user. It would only download tweets it hadn&amp;rsquo;t already processed based on the last saved tweets unique id (as set by twitter). All the data from the tweets were making it into the database as expected but every time the application downloaded tweets it would re-download the same tweets.</description>
    </item>
    
    <item>
      <title>bson keys must be strings or symbols</title>
      <link>https://alwayscoding.ca/momentos/2011/02/09/bson-keys-must-be-strings-or-symbols/</link>
      <pubDate>Wed, 09 Feb 2011 00:16:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2011/02/09/bson-keys-must-be-strings-or-symbols/</guid>
      <description>While setting up a new Rails development environment I ran into the error bson keys must be strings or symbols. After some googling I found the following method to fix it:
/gems/bson-1.2.0/lib/bson/bson_c.rb:24:in `serialize&amp;#39;: keys must be strings or symbols (TypeError) rvm gemset empty bundle install /fixed</description>
    </item>
    
    <item>
      <title>The Ruby Symbol is a Memory Leak</title>
      <link>https://alwayscoding.ca/momentos/2010/12/04/the-ruby-symbol-is-a-memory-leak/</link>
      <pubDate>Sat, 04 Dec 2010 00:13:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2010/12/04/the-ruby-symbol-is-a-memory-leak/</guid>
      <description>This is just a quick bit that I learned early in my Ruby career and always found interesting.
Symbols Are Memory Leaks
So is this the end of the world?
No
Symbols are a unique thing in ruby. It&amp;rsquo;s immutable, constant and unique. You can re-use the same Symbol over and over without allocating extra memory. As opposed to using a String over and over which will allocate memory with each instance.</description>
    </item>
    
  </channel>
</rss>
