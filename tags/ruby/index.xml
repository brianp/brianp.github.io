<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ruby on { always: &#39;coding&#39; }</title>
    <link>https://alwayscoding.ca/tags/ruby/</link>
    <description>Recent content in ruby on { always: &#39;coding&#39; }</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Oct 2015 09:12:00 +0000</lastBuildDate><atom:link href="https://alwayscoding.ca/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tips for working with Delayed Job</title>
      <link>https://alwayscoding.ca/momentos/2015/10/01/tips-for-working-with-delayed-job/</link>
      <pubDate>Thu, 01 Oct 2015 09:12:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2015/10/01/tips-for-working-with-delayed-job/</guid>
      <description>DelayedJob has always been a great “hit the ground running” background task runner for ruby. It is simple to setup, easy to use and can more than carry its own weight in tasks.
Don&amp;rsquo;t know what a backround runner does or why you would use one?
I will not delve into why you need one but you can check out a summary here: Background Jobs in Ruby on Rails.</description>
    </item>
    
    <item>
      <title>Handling code duplication with Sass @imports in the asset pipeline</title>
      <link>https://alwayscoding.ca/momentos/2014/02/25/handling-code-duplication-with-sass-at-imports-in-the-asset-pipeline/</link>
      <pubDate>Tue, 25 Feb 2014 15:08:38 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2014/02/25/handling-code-duplication-with-sass-at-imports-in-the-asset-pipeline/</guid>
      <description>I have used the asset pipeline heavily since its release in Rails 3.1.0 over two years ago. Only recently did I run in to a handful of gotchas when it came to dealing with stylesheet compilations using Sass.      I guest wrote a post about my experience using SASS in the asset pipeline at Unbounce.
Head on over to the Inside Unbounce blog to check out the full post.</description>
    </item>
    
    <item>
      <title>Handling Dates &amp; Timezones in Ruby &amp; Rails</title>
      <link>https://alwayscoding.ca/momentos/2013/08/15/handling-dates-and-timezones-in-ruby-and-rails/</link>
      <pubDate>Thu, 15 Aug 2013 11:21:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/08/15/handling-dates-and-timezones-in-ruby-and-rails/</guid>
      <description>I&amp;rsquo;ve spent almost the last two weeks dealing with Date and Time Zone related issues within one of the applications I contract on. This is a just a list of notable behaviours I expereinced whilst working with Ruby, Rails, Dates &amp;amp; TimeZones.
Note: DST is in effect at the time of writing.
Inconsistent Handling of DST In the code below we instantiate an ActiveSupport::TimeZone object. I would love to think that this instance would know everything about that Time Zone.</description>
    </item>
    
    <item>
      <title>Using Rails I18n translations to solve dynamic content issues</title>
      <link>https://alwayscoding.ca/momentos/2013/06/13/using-rails-i18n-translations-to-solve-dynamic-content-issues/</link>
      <pubDate>Thu, 13 Jun 2013 17:33:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/06/13/using-rails-i18n-translations-to-solve-dynamic-content-issues/</guid>
      <description>Last week during my main work contract I had been tasked with doing some would-be trivial content updates to a section of a client application. Content updates would normally involve hopping into a view changing some images or text and re-deploying. This particular section though is a little more complex then that and way more complex then it should be.
The Setup This particular section of the application has rotating content.</description>
    </item>
    
    <item>
      <title>DataMapper SQL Queries in Rails Console</title>
      <link>https://alwayscoding.ca/momentos/2013/06/09/datamapper-sql-queries-in-rails-console/</link>
      <pubDate>Sun, 09 Jun 2013 13:37:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/06/09/datamapper-sql-queries-in-rails-console/</guid>
      <description>A quick note on logging SQL queries in DataMapper 1.2 so you can see exactly what&amp;rsquo;s going on behind the scenes. Seeing the query can be beneficial in debugging when getting unexpected results or trying to increase query performance.
DataMapper::Logger.new($stdout, :debug)
Enter that at anytime while running in rails c and you should start seeing the output immediatley.
Note If you don&amp;rsquo;t see the output potentially it&amp;rsquo;s because of DM&amp;rsquo;s identiity map.</description>
    </item>
    
    <item>
      <title>Map with Index</title>
      <link>https://alwayscoding.ca/momentos/2013/06/07/map-with-index/</link>
      <pubDate>Fri, 07 Jun 2013 15:32:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/06/07/map-with-index/</guid>
      <description>Notes: Working with ruby 1.8.7 but 1.9 solution presented at bottom.
While working on my main contract today I needed to create a new array based off mutated values of an existing array. Simple enough I&amp;rsquo;ll just use Enumerable::map right? Almost immediatley I realized I needed to make a reference to an array via the loops index. I first checked to see if a map_with_index existed similar to Enumerable::each_with_index.
It doesn&amp;rsquo;t.</description>
    </item>
    
    <item>
      <title>More fun with the Ruby Symbol</title>
      <link>https://alwayscoding.ca/momentos/2013/03/13/more-fun-with-the-ruby-symbol/</link>
      <pubDate>Wed, 13 Mar 2013 01:53:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/03/13/more-fun-with-the-ruby-symbol/</guid>
      <description>So while in the #RubyOnRails IRC channel late at night (never a good idea) some silly conversation occured:
(someone gists some code)
sevenseacat: empty array seems the silly thing to have
Tarential: sometimes I like to add empty arrays, you know, just in case I need them later
Tarential: so they&amp;rsquo;re close at hand
tagrudev: little kittens die when you define an unused var
brianpWins: but if you do want to leave empty arrays around.</description>
    </item>
    
    <item>
      <title>Installing Ruby 2.0.0 on MacOSX - Build Failed</title>
      <link>https://alwayscoding.ca/momentos/2013/03/12/installing-ruby-2-dot-0-0-on-macosx-build-failed/</link>
      <pubDate>Tue, 12 Mar 2013 00:42:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/03/12/installing-ruby-2-dot-0-0-on-macosx-build-failed/</guid>
      <description>Excited to start running Garnish against Ruby 2.0.0 I attempted installation tonight to get build failed:
downloading ruby-2.0.0-p0.tar.gz... -&amp;gt; http://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p0.tar.gz Installing ruby-2.0.0-p0... BUILD FAILED Inspect or clean up the working tree at /var/folders/td/0z79ghbs125193ngl8y0j8180000gn/T/ruby-build.20130312001656.54615 Results logged to /var/folders/td/0z79ghbs125193ngl8y0j8180000gn/T/ruby-build.20130312001656.54615.log Last 10 log lines: installing default gems: /Users/brianp/.rbenv/versions/2.0.0-p0/lib/ruby/gems/2.0.0 (build_info, cache, doc, gems, specifications) bigdecimal 1.2.0 io-console 0.4.2 json 1.7.7 minitest 4.3.2 psych 2.0.0 rake 0.9.6 rdoc 4.0.0 test-unit 2.0.0.0 The Ruby openssl extension was not compiled.</description>
    </item>
    
    <item>
      <title>n&#43;1 Problems and Identity Maps</title>
      <link>https://alwayscoding.ca/momentos/2013/03/06/n-plus-1-problems-and-identity-maps/</link>
      <pubDate>Wed, 06 Mar 2013 02:02:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/03/06/n-plus-1-problems-and-identity-maps/</guid>
      <description>Forward: This post is mainly copypasta from an answer I wrote on StackOverflow. It also takes into account the version of Mongoid being used predates the includes method. The includes method being the suggested best practice for the problem now. includes will be mentioned at the bottom of the post.
Take me to the current best practice.
How to deal with n+1 issues utilizing identity maps:
What is the n+1 issue?</description>
    </item>
    
    <item>
      <title>Why I Drive 100km to Abbotsford from Vancouver for a Meetup</title>
      <link>https://alwayscoding.ca/momentos/2013/02/06/why-i-drive-100km-to-abbotsford-from-vancouver-for-a-meetup/</link>
      <pubDate>Wed, 06 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/02/06/why-i-drive-100km-to-abbotsford-from-vancouver-for-a-meetup/</guid>
      <description>In 2009 I attended Wordcamp Vancouver and actually met a handful of people I still talk to, tweet to and hang out with on a semi-regular basis. At the Wordcamp after party I was talking with @curtismchale and he mentioned although he didn&amp;rsquo;t do much ruby development he got together with the Fraser Valley Ruby Brigade on Wednesday nights in Abbotsford. He also mentioned they hang out on irc frequently and I should pop into the channel and say Hi.</description>
    </item>
    
    <item>
      <title>Calling a Specific Gem Version In The Console</title>
      <link>https://alwayscoding.ca/momentos/2013/02/01/calling-a-specific-gem-version-in-the-console/</link>
      <pubDate>Fri, 01 Feb 2013 16:00:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2013/02/01/calling-a-specific-gem-version-in-the-console/</guid>
      <description>Today I was trying to generate a Rails 3.1.0 project (for testing purposes). I simply called rails new rollback which generated a rails 3.2.11 project and proceeded to change the gemfile version to 3.1.0. This resulted in numerous application errors. The simple solution was to generate the project with the Rails version 3.1.0. To do this call the gem with the version number as such:
$ rails _3.1.0_ new rollback You also must already have this version of the gem installed on your system for it to work.</description>
    </item>
    
    <item>
      <title>Hash Defaults in Ruby</title>
      <link>https://alwayscoding.ca/momentos/2012/06/15/hash-defaults-in-ruby/</link>
      <pubDate>Fri, 15 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2012/06/15/hash-defaults-in-ruby/</guid>
      <description>I was writing a rake task to handle importing data from an older community system and needed to set a default value for anything that the old system didn&amp;rsquo;t have. I was using hashs and thought to myself &amp;ldquo;It would be sweet if hashs had defaults.&amp;rdquo; After a quick doc check I found out that hashs do infact support defaults.
I encourage you to check out the Ruby Docs http://www.ruby-doc.org/core-1.9.3/Hash.html#method-i-default</description>
    </item>
    
    <item>
      <title>Ruby Hash Syntax: Hashrocket vs JSON-Style</title>
      <link>https://alwayscoding.ca/momentos/2012/06/15/ruby-hash-syntax-hashrocket-vs-json-style/</link>
      <pubDate>Fri, 15 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2012/06/15/ruby-hash-syntax-hashrocket-vs-json-style/</guid>
      <description>At a first glance the 1.9 ruby hash syntax looks like a simple change. No longer using the infamous &amp;ldquo;Hashrocket&amp;rdquo; and moving to a familiar JavaScript Object Notation.
{:cat =&amp;gt; &amp;#39;meow&amp;#39;} # 1.8 {cat: &amp;#39;meow&amp;#39;} # 1.9 On an average day I write equally as much JavaScript as I do Ruby so the new 1.9 syntax is an easy swtich for me.
Do these updates to the syntax mean that we&amp;rsquo;ll be seeing the demise of the 1.</description>
    </item>
    
    <item>
      <title>Transactions and new_record?</title>
      <link>https://alwayscoding.ca/momentos/2012/06/05/transactions-and-new-record/</link>
      <pubDate>Tue, 05 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2012/06/05/transactions-and-new-record/</guid>
      <description>While working with the ActiveRecord method &amp;lsquo;new_record?&amp;rsquo; and Transactions I ran into an odd issue after I had run a few objects through a Transaction. Although the transaction had rolled back and thus not saving the record, running &amp;lsquo;object_instance.new_record?&amp;rsquo; resulted in a return of false as if the record had been saved to the database.
I also found the same issue recorded here: http://squarewheel.wordpress.com/2008/06/11/new_record/
Here is example code where the error will happen.</description>
    </item>
    
    <item>
      <title>Flash[:notice] vs Flash.now[:notice]</title>
      <link>https://alwayscoding.ca/momentos/2011/09/11/flash-notice-vs-flash-dot-now-notice/</link>
      <pubDate>Sun, 11 Sep 2011 00:29:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2011/09/11/flash-notice-vs-flash-dot-now-notice/</guid>
      <description>While working with my new employer (in 2011) I noticed a minor but recurring issue in our application. We had been storing flash[:notice] messages in most of our actions but were not using that flash message anywhere. This was resulting in the flash message showing up at in-appropriate times. What I was unaware of was a slightly different call which is flash.now[:notice]. This results in the flash only having a lifespan of the through the next request.</description>
    </item>
    
    <item>
      <title>The Ruby Symbol is a Memory Leak</title>
      <link>https://alwayscoding.ca/momentos/2010/12/04/the-ruby-symbol-is-a-memory-leak/</link>
      <pubDate>Sat, 04 Dec 2010 00:13:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2010/12/04/the-ruby-symbol-is-a-memory-leak/</guid>
      <description>This is just a quick bit that I learned early in my Ruby career and always found interesting.
Symbols Are Memory Leaks
So is this the end of the world?
No
Symbols are a unique thing in ruby. It&amp;rsquo;s immutable, constant and unique. You can re-use the same Symbol over and over without allocating extra memory. As opposed to using a String over and over which will allocate memory with each instance.</description>
    </item>
    
  </channel>
</rss>
