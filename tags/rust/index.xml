<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust on { always: &#39;coding&#39; }</title>
    <link>https://alwayscoding.ca/tags/rust/</link>
    <description>Recent content in rust on { always: &#39;coding&#39; }</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 16 Nov 2016 11:00:00 +0000</lastBuildDate><atom:link href="https://alwayscoding.ca/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RustFest 2016 - Learning to Love the Unfamiliar</title>
      <link>https://alwayscoding.ca/momentos/2016/11/16/rustfest-2016-learning-to-love-the-unfamiliar/</link>
      <pubDate>Wed, 16 Nov 2016 11:00:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2016/11/16/rustfest-2016-learning-to-love-the-unfamiliar/</guid>
      <description>Coming from Ruby, JS, Python or another language? Exploring new languages can be toilsome. Rust is no different. You’ll find new idioms and features that could be unfamiliar to navigate. You might even detest them at first; comparing it to how you’d prefer it in your favourite language.
We will learn to navigate your transition into the Rust landscape. Introduce practices that might not make sense at first. See comparisons of how you may have done things, and how we can improve those practices with Rust.</description>
    </item>
    
    <item>
      <title>RustConf 2016 Talks</title>
      <link>https://alwayscoding.ca/momentos/2016/09/10/rustconf-2016-talks/</link>
      <pubDate>Sat, 10 Sep 2016 10:00:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2016/09/10/rustconf-2016-talks/</guid>
      <description>Opening Keynote by Aaron Turon and Niko Matsakis
photo by: [@eigenrick](https://twitter.com/eigenrick)  175 new features since 1.0  New features underway
 Specialization impl Trait The ? operator Macro 1.1 offers custom derive  Compiler internals redesigned
 Mir in orbit Dynamic drop flags Incremental comp Error messages  Challenges in the Rust survey
 1 in 4 Learning curve (First 3 weeks is rough) 1 in 7 More libraries 1 in 9 &amp;ldquo;Maturity&amp;rdquo; 1 in 19 IDEs 1 in 20 Compiler Perf  Speed and reliability are core values of rust, but for 2017, productivity should as well.</description>
    </item>
    
    <item>
      <title>Traits and Threads Workshop</title>
      <link>https://alwayscoding.ca/momentos/2016/09/09/traits-and-threads-workshop/</link>
      <pubDate>Fri, 09 Sep 2016 10:00:00 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2016/09/09/traits-and-threads-workshop/</guid>
      <description>These are raw notes taken at RustConf during the “Traits and Threads” workshop put on by Aaron Turon
All Exercises
 Methods are function that accept self &amp;amp;self.items == &amp;amp;(self.items) where the borrow (&amp;amp;) is for the item, not for self. Structs have no default value, requires creating all values. mut as mute not like a mixed breed dog   Abstraction: The Plan
 Generics Traits As Interfaces For Code Resuse For Perator Overloading Trait Objects   Traits are rusts interfaces.</description>
    </item>
    
    <item>
      <title>Cross compilation to OSX with Rust</title>
      <link>https://alwayscoding.ca/momentos/2016/05/08/cross-compilation-to-osx-with-rust/</link>
      <pubDate>Sun, 08 May 2016 10:06:42 +0000</pubDate>
      
      <guid>https://alwayscoding.ca/momentos/2016/05/08/cross-compilation-to-osx-with-rust/</guid>
      <description>It started with Muxed. I was excited to get a working first build, but despite my development machine being a MacBook Air, I develop most in VM&amp;rsquo;s using vagrant. My native builds were all linux based. It would be easy enough to move the code to an OSX machine and compile there but I do not like build tools on my native machine. And that would simply be too easy.</description>
    </item>
    
  </channel>
</rss>
